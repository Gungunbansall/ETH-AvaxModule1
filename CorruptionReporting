// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract CorruptionReporting {
    struct Report {
        address reporter;
        string description;
        bool verified;
        bool rewarded;
    }

    address public admin;
    uint public reportCount;
    mapping(uint => Report) public reports;

    event ReportSubmitted(uint indexed id, address indexed reporter);
    event ReportVerified(uint indexed id);
    event RewardIssued(uint indexed id);

    modifier onlyAdmin() {
        require(msg.sender == admin, "Caller is not the admin");
        _;
    }

    constructor() {
        admin = msg.sender;
    }

    function submitReport(string memory _description) public {
        require(bytes(_description).length > 0, "Description is required");

        reports[++reportCount] = Report(msg.sender, _description, false, false);
        emit ReportSubmitted(reportCount, msg.sender);
    }

    function verifyReport(uint _reportId) public onlyAdmin {
        require(_reportId > 0 && _reportId <= reportCount, "Invalid report ID");

        Report storage report = reports[_reportId];
        require(!report.verified, "Report already verified");

        report.verified = true;
        emit ReportVerified(_reportId);
    }

    function issueReward(uint _reportId) public onlyAdmin {
        require(_reportId > 0 && _reportId <= reportCount, "Invalid report ID");

        Report storage report = reports[_reportId];
        require(report.verified && !report.rewarded, "Invalid reward state");

        report.rewarded = true;
        (bool success, ) = report.reporter.call{value: 1 ether}("");
        require(success, "Reward transfer failed");

        emit RewardIssued(_reportId);
    }

    function checkInvariant() public view {
        assert(reportCount >= 0);
    }

    function forceRevert(string memory _reason) public pure {
        revert(_reason);
    }

    receive() external payable{
	}
}
